access.static.via.class.reference.family=Access static via class reference
access.static.via.class.reference.text=Access static ''{1}.{0}'' via class ''{2}'' reference
add.catch.clause.family=Add Exception to Catch Clause
add.catch.clause.text=Add Catch Clause(s)
add.class.to.extends.list=Make ''{0}'' extend ''{1}''
add.constructor.parameter.name=Add constructor parameter
add.default.constructor.family=Add Default Constructor
add.default.constructor.text=Add {0} no-args constructor to {1}
add.doctag.to.custom.tags=Add {0} to custom tags
add.exception.to.throws.family=Add Exception to Method Signature
add.exception.to.throws.inherited.method.warning.text=Method ''{0}'' is inherited.\n\
add.exception.to.throws.text=Add {0, choice, 0#Exception|2#Exceptions} to Method Signature
add.import=Add Import
add.interface.to.implements.list=Make ''{0}'' implement ''{1}''
add.library.add.this=&Add this file
add.library.annotations.description=You are using annotation classes from org.jetbrains.annotations package.\n\
add.library.copy.to=&Copy to
add.library.description.choose.folder=Choose directory where the library will be copied
add.library.description.locate.library=Locate library file which will be added as module library
add.library.error.cannot.copy=Cannot copy ''{0}'' to ''{1}''\n({2})
add.library.error.not.found=Library file ''{0}'' does not exist
add.library.file=Library &file:
add.library.title.choose.folder=Choose directory
add.library.title.dialog=Add Library to Project
add.library.title.error=Error
add.library.title.locate.library=Locate library
add.method.body.text=Add Method Body
add.method.family=Add Method
add.method.text=Add Method ''{0}'' to Class ''{1}''
add.modifier.fix=Make ''{0}'' {1}
add.new.array.family=Add missing new expression
add.new.array.text=Add ''new {0}[]''
add.parameter.from.usage.text=Add ''{0}'' as {1, choice, 1#1st|2#2nd|3#3rd|4#{1,number}th} parameter to method ''{2}''
add.qualifier.original.class.chooser.title=Original class
add.qualifier=Add qualifier
add.return.statement.family=Add Return Statement
add.return.statement.text=Add Return Statement
add.runtime.exception.to.throws.family=Add Runtime Exception to Method Signature
add.runtime.exception.to.throws.text=Add Runtime Exception(s) to Method Signature
add.type.arguments.single.argument.text=Add explicit type arguments
add.type.arguments.text=Add explicit type arguments to {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} argument
add.typecast.family=Add TypeCast
add.typecast.text=Cast to ''{0}''
adjust.package.family=Adjust Package Name
adjust.package.text=Set package name to ''{0}''
anonymous.class.presentation=Anonymous class derived from {0}
bring.variable.to.scope.family=Bring Variable to Scope
bring.variable.to.scope.text=Bring ''{0}'' into Scope
cannot.change.field.exception=Cannot change field ''{0}'' type.\nReason: {1}
cannot.create.java.file.error.text=Cannot create {0}.java in {1}: {2}
cannot.create.java.file.error.title=File Creation Failed
cannot.create.java.package.error.text=Cannot create {0} in {1}: {2}
cannot.create.java.package.error.title=Package Creation Failed
cast.parameter.text=Cast {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} parameter to ''{1}''
cast.single.parameter.text=Cast parameter to ''{0}''
change.class.signature.family=Change class signature
change.class.signature.text=Change signature of ''{0}'' to match ''{1}''
change.extends.list.family=Extend Class from
change.inheritors.visibility.warning.text=Do you want to change inheritors' visibility to visibility of the base method?
change.inheritors.visibility.warning.title=Change Inheritors
change.method.signature.from.usage.family=Change method signature from usage
change.method.signature.from.usage.text=Change signature of ''{0}'' to ''{1}({2})''
change.new.operator.type.family=Change new operator type
change.new.operator.type.text=Change ''{0}'' to ''new {1}{2}''
change.parameter.class.family=Change Parameter Class
change.parameter.from.usage.text=Change {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} parameter of method ''{1}'' from ''{2}'' to ''{3}''
change.to.append.family=Fix StringBuilder append
change.to.append.text=Change to ''{0}''
class.initializer.presentation={0} class initializer
class.to.import.chooser.title=Class to Import
convert.method.to.constructor=Make method constructor
convert.to.string.family=Fix Character Literal
convert.to.string.text=Convert to String Literal
create.abstract.method.from.usage.text=Create Abstract Method ''{0}''
create.accessor.for.unused.field.family=Create Accessor for Unused Field
create.class.from.new.family=Create Class from New
create.class.from.new.text=Create Class ''{0}''
create.class.from.usage.family=Create Class from Usage
create.class.from.usage.text=Create {0} ''{1}''
create.class.text=Create Class {0}
create.class.title=Create {0}
create.class=class
create.constant.from.usage.family=Create Constant From Usage
create.constant.from.usage.text=Create Constant Field ''{0}''
create.constructor.from.new.family=Create Constructor from New
create.constructor.from.new.text=Create Constructor
create.constructor.from.super.call.family=Create Constructor From super() Call
create.constructor.from.this.call.family=Create Constructor From this() Call
create.constructor.matching.super=Create constructor matching super
create.constructor.text=Create Constructor In ''{0}''
create.enum.constant.from.usage.text=Create Enum Constant ''{0}''
create.enum=enum
create.field.from.usage.family=Create Field from Usage
create.field.from.usage.text=Create Field ''{0}''
create.field.text=Create Field {0}
create.getter.and.setter.for.field=Create getter and setter for ''{0}''
create.getter.for.field=Create getter for ''{0}''
create.getter=Create Getter
create.inner.class.from.usage.text=Create Inner {0} ''{1}''
create.interface.text=Create Interface {0}
create.interface=interface
create.local.from.instanceof.usage.family=Create Local Var from instanceof Usage
create.local.from.instanceof.usage.text=Insert ''({0}){1}'' declaration
create.local.from.usage.family=Create Local from Usage
create.local.from.usage.text=Create Local Variable ''{0}''
create.method.from.usage.family=Create Method from Usage
create.method.from.usage.text=Create Method ''{0}''
create.package.text=Create Package {0}
create.parameter.from.usage.family=Create Parameter from Usage
create.parameter.from.usage.text=Create Parameter ''{0}''
create.property.from.usage.family=Create Property From Usage
create.property.text=Create Property {0}
create.readable.property.with.field=Create getter and field for ''{0}''
create.readable.property=Create getter for ''{0}''
create.readable.writable.property.with.field=Create getter, setter and field for ''{0}''
create.setter.for.field=Create setter for ''{0}''
create.setter=Create Setter
create.writable.property.with.field=Create setter and field for ''{0}''
create.writable.property=Create setter for ''{0}''
defer.final.assignment.with.temp.family=Defer final assignment with temp
defer.final.assignment.with.temp.text=Defer assignment to ''{0}'' using temp variable
delete.body.family=Delete Body
delete.body.text=Delete Body
delete.catch.family=Delete Catch
delete.catch.text=Delete catch for ''{0}''
enable.optimize.imports.on.the.fly=Enable 'Settings|Code Style|Imports|Optimize imports on the fly'
exchange.extends.implements.keyword=Change ''{0} {2}'' to ''{1} {2}''
fix.add.special.annotation.family=Add to Special Annotations
fix.add.special.annotation.text=Add ''{0}'' to special annotations list
fix.argument.family=Fix Arguments
fix.javadoc.family=Fix Javadoc
fix.modifiers.family=Fix Modifiers
fix.parameter.type.family=Fix Parameter Type
fix.parameter.type.text=Make ''{0}'' take parameter of type ''{1}'' here
fix.return.type.family=Fix Return Type
fix.return.type.text=Make ''{0}'' return ''{1}''
fix.single.character.string.to.char.literal.family=Fix literal type
fix.single.character.string.to.char.literal.text=Change {0} to {1} (to {2} literal)
fix.super.method.return.type.family=Fix Super Method Return Type
fix.super.method.return.type.text=Make ''{0}'' return ''{1}''
fix.throws.list.add.exception=Add ''{0}'' to ''{1}'' throws list
fix.throws.list.family=Fix Throws List
fix.throws.list.remove.exception=Remove ''{0}'' from ''{1}'' throws list
fix.unused.symbol.injection.family=Add to Dependency Injection Annotations
fix.unused.symbol.injection.text=Suppress for {0} annotated by ''{1}''
fix.variable.type.family=Fix Variable Type
fix.variable.type.text=Change {0} ''{1}'' type to ''{2}''
generalize.catch.family=Generalize Catch
generalize.catch.text=Generalize catch for ''{0}'' to ''{1}''
generify.family=Generify File
generify.text=Try to generify ''{0}''
implement.methods.fix=Implement Methods
import.class.fix=Import Class
initialize.final.field.in.constructor.choose.dialog.title=Choose constructors to add initialization to
initialize.final.field.in.constructor.name=Initialize in constructor
insert.new.fix=Insert new
insert.super.constructor.call.family=Base Ctr call
insert.super.constructor.call.text=Insert 'super();'
make.class.an.interface.family=Make Class an Interface
make.class.an.interface.text=Make ''{0}'' an interface
make.final.copy.to.temp=Copy ''{0}'' to temp final variable
make.final.family=Make Final
make.final.text=Make {0} final
make.final.transform.to.one.element.array=Transform {0} into final one element array
make.interface.an.class.text=Make ''{0}'' a class
make.vararg.parameter.last.family=Make vararg parameter last
make.vararg.parameter.last.text=Move ''{0}'' to the end of the list
method.is.inherited.warning.title=Method Is Inherited
move.bound.class.to.front.fix.text=Move bound ''{0}'' to the beginning of the bounds list of type parameter ''{1}''
move.catch.up.family=Move Catch Up
move.catch.up.text=Move catch for ''{0}'' before ''{1}''
move.class.in.extend.list.family=Move Class in Extend list
move.class.to.package.family=Move Class to Package
move.class.to.package.text=Move to package ''{0}''
move.class.to.separate.file.family=Move Class to Separate File
move.class.to.separate.file.text=Move class ''{0}'' to ''{0}.java''
negation.broader.scope.family=Negation Broader Scope
negation.broader.scope.text=Change to ''!({0})''
new.method.body.template.error.text=Please Correct "New Method Body" Template
new.method.body.template.error.title=File Template Error
optimize.imports.fix=Optimize Imports
orderEntry.fix.add.annotations.jar.to.classpath=Add 'annotations.jar' to classpath
orderEntry.fix.add.dependency.on.module=Add dependency on module ''{0}''
orderEntry.fix.add.junit.jar.to.classpath=Add junit to classpath
orderEntry.fix.add.library.to.classpath=Add library ''{0}'' to classpath
orderEntry.fix.circular.dependency.warning=Adding dependency on module ''{0}'' will introduce circular dependency between modules ''{1}'' and ''{2}''.\nAdd dependency anyway?
orderEntry.fix.family.add.library.to.classpath=Add library to classpath
orderEntry.fix.family.add.module.dependency=Add module dependency
orderEntry.fix.title.circular.dependency.warning=Circular Dependency Warning
permute.arguments=Permute arguments
remove.class.from.extends.list=Make ''{0}'' not extend ''{1}''
remove.interface.from.implements.list=Make ''{0}'' not implement ''{1}''
remove.modifier.fix=Make ''{0}'' not {1}
remove.parameter.from.usage.text=Remove {0, choice, 1#1st|2#2nd|3#3rd|4#{0,number}th} parameter from method ''{1}''
remove.qualifier.action.text=Remove Qualifier
remove.qualifier.fix=Remove qualifier
remove.redundant.arguments.family=Remove redundant arguments
remove.redundant.arguments.text=Remove redundant arguments to call ''{0}''
remove.redundant.else.fix=Remove Redundant 'else'
remove.suppression.action.family=Remove suppression
remove.suppression.action.name=Remove ''{0}'' suppression
remove.unused.field=Remove field ''{0}''
remove.unused.parameter.family=Remove unused parameter
remove.unused.parameter.text=Remove Parameter ''{0}''
remove.unused.variable.family=Remove unused variable
remove.unused.variable=Remove variable ''{0}''
rename.wrong.reference.family=Rename Wrong Reference
rename.wrong.reference.text=Rename Reference
replace.with.list.access.text=Replace with list access
reuse.variable.declaration.family=Reuse variable declaration
reuse.variable.declaration.text=Reuse previous variable ''{0}'' declaration
safe.delete.family=Safe delete
safe.delete.text=Safe delete ''{0}''
searching.for.usages.progress.title=Searching For Usages...
setup.jdk.location.family=Setup JDK Location
setup.jdk.location.text=Setup JDK
side.effect.action.cancel=&Cancel
side.effect.action.remove=&Remove
side.effect.action.transform=&Transform
side.effect.message1=<html><body>\
side.effect.message2=<html><body>\
side.effects.warning.dialog.title=Side Effects Found
simplify.boolean.expression.family=Simplify boolean expression
simplify.boolean.expression.text=Simplify ''{0}'' to {1}
static.import.method.choose.method.to.import=Choose Method to Import
static.import.method.text=Static Import Method
super.class.constructors.chooser.title=Choose Super Class Constructors
surround.with.try.catch.fix=Surround with try/catch
target.class.chooser.title=Choose Target Class
uidesigner.change.bound.field.type=Change bound field type
uidesigner.change.gui.component.type=Change GUI component type
wrap.expression.using.static.accessor.family=Wrap Expression
wrap.expression.using.static.accessor.text=Wrap using ''{0}''
